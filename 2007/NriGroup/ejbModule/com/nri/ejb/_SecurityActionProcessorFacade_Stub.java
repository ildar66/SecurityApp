// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.nri.ejb;

import com.nri.domain.Company;
import com.nri.domain.Division;
import com.nri.domain.DivisionType;
import com.nri.domain.MsUser;
import com.nri.domain.Operator;
import com.nri.domain.Page;
import com.nri.domain.People;
import com.nri.domain.Profile;
import com.nri.domain.Role;
import com.nri.domain.WorkPosition;
import com.nri.domain.Worker;
import com.nri.exception.MappingException;
import com.nri.exception.ModelException;
import com.nri.exception.NoSuchCompanyException;
import com.nri.exception.NoSuchDivisionException;
import com.nri.exception.NoSuchMsUserException;
import com.nri.exception.NoSuchOperatorException;
import com.nri.exception.NoSuchPeopleException;
import com.nri.exception.NoSuchProfileException;
import com.nri.exception.NoSuchRoleException;
import com.nri.exception.NoSuchWorkPositionException;
import com.nri.exception.NoSuchWorkerException;
import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.ejb.EJBHome;
import javax.ejb.EJBObject;
import javax.ejb.Handle;
import javax.ejb.RemoveException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ServantObject;

public class _SecurityActionProcessorFacade_Stub extends Stub implements SecurityActionProcessorFacade {
    
    private static final String[] _type_ids = {
        "RMI:com.nri.ejb.SecurityActionProcessorFacade:0000000000000000", 
        "RMI:javax.ejb.EJBObject:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public EJBHome getEJBHome() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_EJBHome", true);
                    in = _invoke(out);
                    return (EJBHome) in.read_Object(EJBHome.class);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getEJBHome();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_EJBHome",javax.ejb.EJBObject.class);
            if (so == null) {
                return getEJBHome();
            }
            try {
                EJBHome result = ((javax.ejb.EJBObject)so.servant).getEJBHome();
                return (EJBHome)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getPrimaryKey() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_primaryKey", true);
                    in = _invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getPrimaryKey();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_primaryKey",javax.ejb.EJBObject.class);
            if (so == null) {
                return getPrimaryKey();
            }
            try {
                Object result = ((javax.ejb.EJBObject)so.servant).getPrimaryKey();
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void remove() throws RemoteException, RemoveException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("remove", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:javax/ejb/RemoveEx:1.0")) {
                        throw (RemoveException) in.read_value(RemoveException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    remove();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("remove",javax.ejb.EJBObject.class);
            if (so == null) {
                remove();
                return;
            }
            try {
                ((javax.ejb.EJBObject)so.servant).remove();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof RemoveException) {
                    throw (RemoveException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Handle getHandle() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("_get_handle", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Handle) in.read_abstract_interface(Handle.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return getHandle();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_handle",javax.ejb.EJBObject.class);
            if (so == null) {
                return getHandle();
            }
            try {
                Handle result = ((javax.ejb.EJBObject)so.servant).getHandle();
                return (Handle)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isIdentical(EJBObject arg0) throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("isIdentical", true);
                    Util.writeRemoteObject(out,arg0);
                    in = _invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return isIdentical(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isIdentical",javax.ejb.EJBObject.class);
            if (so == null) {
                return isIdentical(arg0);
            }
            try {
                EJBObject arg0Copy = (EJBObject) Util.copyObject(arg0,_orb());
                return ((javax.ejb.EJBObject)so.servant).isIdentical(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removePeople(Integer arg0) throws NoSuchPeopleException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removePeople", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchPeopleEx:1.0")) {
                        throw (NoSuchPeopleException) in.read_value(NoSuchPeopleException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removePeople(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removePeople",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removePeople(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removePeople(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchPeopleException) {
                    throw (NoSuchPeopleException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addPeople(People arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addPeople", true);
                    out.write_value(arg0,People.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addPeople(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addPeople",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addPeople(arg0);
                return;
            }
            try {
                People arg0Copy = (People) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addPeople(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updatePeople(People arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updatePeople", true);
                    out.write_value(arg0,People.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updatePeople(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updatePeople",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updatePeople(arg0);
                return;
            }
            try {
                People arg0Copy = (People) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updatePeople(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findAllPeoples() throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findAllPeoples", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findAllPeoples();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findAllPeoples",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findAllPeoples();
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findAllPeoples();
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public People findPeopleByKey(Integer arg0) throws NoSuchPeopleException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findPeopleByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (People) in.read_value(People.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchPeopleEx:1.0")) {
                        throw (NoSuchPeopleException) in.read_value(NoSuchPeopleException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findPeopleByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findPeopleByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findPeopleByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                People result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findPeopleByKey(arg0Copy);
                return (People)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchPeopleException) {
                    throw (NoSuchPeopleException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findPeoplesByName(String arg0) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findPeoplesByName__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findPeoplesByName(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findPeoplesByName__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findPeoplesByName(arg0);
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findPeoplesByName(arg0);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Role findRoleByKey(String arg0) throws NoSuchRoleException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findRoleByKey", true);
                    out.write_value(arg0,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Role) in.read_value(Role.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchRoleEx:1.0")) {
                        throw (NoSuchRoleException) in.read_value(NoSuchRoleException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findRoleByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findRoleByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findRoleByKey(arg0);
            }
            try {
                Role result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findRoleByKey(arg0);
                return (Role)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchRoleException) {
                    throw (NoSuchRoleException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeRole(String arg0) throws NoSuchRoleException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeRole", true);
                    out.write_value(arg0,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchRoleEx:1.0")) {
                        throw (NoSuchRoleException) in.read_value(NoSuchRoleException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeRole(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeRole",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeRole(arg0);
                return;
            }
            try {
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeRole(arg0);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchRoleException) {
                    throw (NoSuchRoleException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findRolesByName(String arg0) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findRolesByName__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findRolesByName(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findRolesByName__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findRolesByName(arg0);
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findRolesByName(arg0);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addRole(Role arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addRole", true);
                    out.write_value(arg0,Role.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addRole(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addRole",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addRole(arg0);
                return;
            }
            try {
                Role arg0Copy = (Role) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addRole(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findAllRoles() throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findAllRoles", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findAllRoles();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findAllRoles",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findAllRoles();
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findAllRoles();
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateRole(Role arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateRole", true);
                    out.write_value(arg0,Role.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateRole(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateRole",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateRole(arg0);
                return;
            }
            try {
                Role arg0Copy = (Role) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateRole(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findRolesByName(String arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findRolesByName__CORBA_WStringValue__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findRolesByName(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findRolesByName__CORBA_WStringValue__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findRolesByName(arg0, arg1);
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findRolesByName(arg0, arg1);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public WorkPosition findWorkPositionByKey(Integer arg0) throws NoSuchWorkPositionException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findWorkPositionByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (WorkPosition) in.read_value(WorkPosition.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchWorkPositionEx:1.0")) {
                        throw (NoSuchWorkPositionException) in.read_value(NoSuchWorkPositionException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findWorkPositionByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findWorkPositionByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findWorkPositionByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                WorkPosition result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findWorkPositionByKey(arg0Copy);
                return (WorkPosition)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchWorkPositionException) {
                    throw (NoSuchWorkPositionException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeWorkPosition(Integer arg0) throws NoSuchWorkPositionException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeWorkPosition", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchWorkPositionEx:1.0")) {
                        throw (NoSuchWorkPositionException) in.read_value(NoSuchWorkPositionException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeWorkPosition(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeWorkPosition",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeWorkPosition(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeWorkPosition(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchWorkPositionException) {
                    throw (NoSuchWorkPositionException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addWorkPosition(WorkPosition arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addWorkPosition", true);
                    out.write_value(arg0,WorkPosition.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addWorkPosition(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addWorkPosition",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addWorkPosition(arg0);
                return;
            }
            try {
                WorkPosition arg0Copy = (WorkPosition) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addWorkPosition(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateWorkPosition(WorkPosition arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateWorkPosition", true);
                    out.write_value(arg0,WorkPosition.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateWorkPosition(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateWorkPosition",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateWorkPosition(arg0);
                return;
            }
            try {
                WorkPosition arg0Copy = (WorkPosition) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateWorkPosition(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findWorkPositions(String arg0, Boolean arg1, String arg2) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findWorkPositions", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Boolean.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findWorkPositions(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findWorkPositions",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findWorkPositions(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                Boolean arg1Copy = (Boolean) copies[1];
                String arg2Copy = (String) copies[2];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findWorkPositions(arg0Copy, arg1Copy, arg2Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void clearInMemoryCaches() throws RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("clearInMemoryCaches", true);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = ex.getInputStream();
                    String id = in.read_string();
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    clearInMemoryCaches();
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("clearInMemoryCaches",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                clearInMemoryCaches();
                return;
            }
            try {
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).clearInMemoryCaches();
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public MsUser findMsUserByKey(Integer arg0) throws NoSuchMsUserException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findMsUserByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (MsUser) in.read_value(MsUser.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchMsUserEx:1.0")) {
                        throw (NoSuchMsUserException) in.read_value(NoSuchMsUserException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findMsUserByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findMsUserByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findMsUserByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                MsUser result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findMsUserByKey(arg0Copy);
                return (MsUser)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchMsUserException) {
                    throw (NoSuchMsUserException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeMsUser(Integer arg0) throws NoSuchMsUserException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeMsUser", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchMsUserEx:1.0")) {
                        throw (NoSuchMsUserException) in.read_value(NoSuchMsUserException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeMsUser(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeMsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeMsUser(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeMsUser(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchMsUserException) {
                    throw (NoSuchMsUserException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addMsUser(MsUser arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addMsUser", true);
                    out.write_value(arg0,MsUser.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addMsUser(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addMsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addMsUser(arg0);
                return;
            }
            try {
                MsUser arg0Copy = (MsUser) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addMsUser(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateMsUser(MsUser arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateMsUser", true);
                    out.write_value(arg0,MsUser.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateMsUser(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateMsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateMsUser(arg0);
                return;
            }
            try {
                MsUser arg0Copy = (MsUser) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateMsUser(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findMsUsers(String arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findMsUsers", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findMsUsers(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findMsUsers",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findMsUsers(arg0, arg1);
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findMsUsers(arg0, arg1);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Company findCompanyByKey(Integer arg0) throws NoSuchCompanyException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findCompanyByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Company) in.read_value(Company.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchCompanyEx:1.0")) {
                        throw (NoSuchCompanyException) in.read_value(NoSuchCompanyException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findCompanyByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findCompanyByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findCompanyByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                Company result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findCompanyByKey(arg0Copy);
                return (Company)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchCompanyException) {
                    throw (NoSuchCompanyException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeCompany(Integer arg0) throws NoSuchCompanyException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeCompany", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchCompanyEx:1.0")) {
                        throw (NoSuchCompanyException) in.read_value(NoSuchCompanyException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeCompany(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeCompany",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeCompany(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeCompany(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchCompanyException) {
                    throw (NoSuchCompanyException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateCompany(Company arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateCompany", true);
                    out.write_value(arg0,Company.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateCompany(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateCompany",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateCompany(arg0);
                return;
            }
            try {
                Company arg0Copy = (Company) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateCompany(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addCompany(Company arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addCompany", true);
                    out.write_value(arg0,Company.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addCompany(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addCompany",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addCompany(arg0);
                return;
            }
            try {
                Company arg0Copy = (Company) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addCompany(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findCompanies(String arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findCompanies", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findCompanies(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findCompanies",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findCompanies(arg0, arg1);
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findCompanies(arg0, arg1);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findAllCompanies() throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findAllCompanies", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findAllCompanies();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findAllCompanies",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findAllCompanies();
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findAllCompanies();
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Division findDivisionByKey(Integer arg0) throws NoSuchDivisionException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDivisionByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Division) in.read_value(Division.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchDivisionEx:1.0")) {
                        throw (NoSuchDivisionException) in.read_value(NoSuchDivisionException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDivisionByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDivisionByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findDivisionByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                Division result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findDivisionByKey(arg0Copy);
                return (Division)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchDivisionException) {
                    throw (NoSuchDivisionException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateDivision(Division arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateDivision", true);
                    out.write_value(arg0,Division.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateDivision(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateDivision",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateDivision(arg0);
                return;
            }
            try {
                Division arg0Copy = (Division) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateDivision(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeDivision(Integer arg0) throws NoSuchDivisionException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeDivision", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchDivisionEx:1.0")) {
                        throw (NoSuchDivisionException) in.read_value(NoSuchDivisionException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeDivision(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeDivision",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeDivision(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeDivision(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchDivisionException) {
                    throw (NoSuchDivisionException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addDivision(Division arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addDivision", true);
                    out.write_value(arg0,Division.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addDivision(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addDivision",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addDivision(arg0);
                return;
            }
            try {
                Division arg0Copy = (Division) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addDivision(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findDivisions(String arg0, Integer arg1, Boolean arg2, String arg3) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDivisions__CORBA_WStringValue__java_lang_Integer__java_lang_Boolean__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Boolean.class);
                    out.write_value(arg3,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDivisions(arg0,arg1,arg2,arg3);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDivisions__CORBA_WStringValue__java_lang_Integer__java_lang_Boolean__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findDivisions(arg0, arg1, arg2, arg3);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                String arg0Copy = (String) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Boolean arg2Copy = (Boolean) copies[2];
                String arg3Copy = (String) copies[3];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findDivisions(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findDivisionsHierarchy(Integer arg0, Boolean arg1, String arg2) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDivisionsHierarchy", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Boolean.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDivisionsHierarchy(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDivisionsHierarchy",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findDivisionsHierarchy(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Boolean arg1Copy = (Boolean) copies[1];
                String arg2Copy = (String) copies[2];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findDivisionsHierarchy(arg0Copy, arg1Copy, arg2Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findDivisions(String arg0, Integer arg1, Boolean arg2, DivisionType arg3, String arg4) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDivisions__CORBA_WStringValue__java_lang_Integer__java_lang_Boolean__com_nri_domain_DivisionType__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Integer.class);
                    out.write_value(arg2,Boolean.class);
                    out.write_value(arg3,DivisionType.class);
                    out.write_value(arg4,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDivisions(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDivisions__CORBA_WStringValue__java_lang_Integer__java_lang_Boolean__com_nri_domain_DivisionType__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findDivisions(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                String arg0Copy = (String) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                Boolean arg2Copy = (Boolean) copies[2];
                DivisionType arg3Copy = (DivisionType) copies[3];
                String arg4Copy = (String) copies[4];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findDivisions(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findWorkers(Worker arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findWorkers__com_nri_domain_Worker__CORBA_WStringValue", true);
                    out.write_value(arg0,Worker.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findWorkers(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findWorkers__com_nri_domain_Worker__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findWorkers(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Worker arg0Copy = (Worker) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findWorkers(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public List findDivisionHierarchyForEncloser(Integer arg0, int arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findDivisionHierarchyForEncloser", true);
                    out.write_value(arg0,Integer.class);
                    out.write_long(arg1);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (List) in.read_value(List.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findDivisionHierarchyForEncloser(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findDivisionHierarchyForEncloser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findDivisionHierarchyForEncloser(arg0, arg1);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                List result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findDivisionHierarchyForEncloser(arg0Copy, arg1);
                return (List)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findWorkers(String arg0, Worker arg1, String arg2) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findWorkers__CORBA_WStringValue__com_nri_domain_Worker__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Worker.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findWorkers(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findWorkers__CORBA_WStringValue__com_nri_domain_Worker__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findWorkers(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                Worker arg1Copy = (Worker) copies[1];
                String arg2Copy = (String) copies[2];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findWorkers(arg0Copy, arg1Copy, arg2Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Worker findWorkerByKey(Integer arg0) throws NoSuchWorkerException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findWorkerByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Worker) in.read_value(Worker.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchWorkerEx:1.0")) {
                        throw (NoSuchWorkerException) in.read_value(NoSuchWorkerException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findWorkerByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findWorkerByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findWorkerByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                Worker result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findWorkerByKey(arg0Copy);
                return (Worker)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchWorkerException) {
                    throw (NoSuchWorkerException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeWorker(Integer arg0) throws NoSuchWorkerException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeWorker", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchWorkerEx:1.0")) {
                        throw (NoSuchWorkerException) in.read_value(NoSuchWorkerException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeWorker(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeWorker",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeWorker(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeWorker(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchWorkerException) {
                    throw (NoSuchWorkerException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addWorker(Worker arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addWorker", true);
                    out.write_value(arg0,Worker.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addWorker(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addWorker",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addWorker(arg0);
                return;
            }
            try {
                Worker arg0Copy = (Worker) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addWorker(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateWorker(Worker arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateWorker", true);
                    out.write_value(arg0,Worker.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateWorker(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateWorker",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateWorker(arg0);
                return;
            }
            try {
                Worker arg0Copy = (Worker) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateWorker(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Page findPeoplesByName(String arg0, Boolean arg1, int arg2, int arg3, String arg4) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findPeoplesByName__CORBA_WStringValue__java_lang_Boolean__long__long__CORBA_WStringValue", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Boolean.class);
                    out.write_long(arg2);
                    out.write_long(arg3);
                    out.write_value(arg4,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Page) in.read_value(Page.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findPeoplesByName(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findPeoplesByName__CORBA_WStringValue__java_lang_Boolean__long__long__CORBA_WStringValue",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findPeoplesByName(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg4},_orb());
                String arg0Copy = (String) copies[0];
                Boolean arg1Copy = (Boolean) copies[1];
                String arg4Copy = (String) copies[2];
                Page result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findPeoplesByName(arg0Copy, arg1Copy, arg2, arg3, arg4Copy);
                return (Page)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperators(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperators", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperators(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperators",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperators(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperators(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Operator findOperatorByKey(Integer arg0) throws NoSuchOperatorException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorByKey", true);
                    out.write_value(arg0,Integer.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Operator) in.read_value(Operator.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchOperatorEx:1.0")) {
                        throw (NoSuchOperatorException) in.read_value(NoSuchOperatorException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorByKey(arg0);
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                Operator result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorByKey(arg0Copy);
                return (Operator)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchOperatorException) {
                    throw (NoSuchOperatorException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeOperator(Integer arg0) throws NoSuchOperatorException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeOperator", true);
                    out.write_value(arg0,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchOperatorEx:1.0")) {
                        throw (NoSuchOperatorException) in.read_value(NoSuchOperatorException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeOperator(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeOperator",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeOperator(arg0);
                return;
            }
            try {
                Integer arg0Copy = (Integer) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeOperator(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchOperatorException) {
                    throw (NoSuchOperatorException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addOperator(Operator arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addOperator", true);
                    out.write_value(arg0,Operator.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addOperator(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addOperator",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addOperator(arg0);
                return;
            }
            try {
                Operator arg0Copy = (Operator) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addOperator(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateOperator(Operator arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateOperator", true);
                    out.write_value(arg0,Operator.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateOperator(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateOperator",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateOperator(arg0);
                return;
            }
            try {
                Operator arg0Copy = (Operator) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateOperator(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findPeopleToNfsUserList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findPeopleToNfsUserList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findPeopleToNfsUserList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findPeopleToNfsUserList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findPeopleToNfsUserList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findPeopleToNfsUserList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findNfsUsers(String arg0, Boolean arg1, String arg2) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findNfsUsers", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,Boolean.class);
                    out.write_value(arg2,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findNfsUsers(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findNfsUsers",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findNfsUsers(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                Boolean arg1Copy = (Boolean) copies[1];
                String arg2Copy = (String) copies[2];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findNfsUsers(arg0Copy, arg1Copy, arg2Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addLinkPeopleToNfsUser(Integer arg0, Integer arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addLinkPeopleToNfsUser", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addLinkPeopleToNfsUser(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addLinkPeopleToNfsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addLinkPeopleToNfsUser(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addLinkPeopleToNfsUser(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void deleteLinkPeopleToNfsUser(Integer arg0, Integer arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("deleteLinkPeopleToNfsUser", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    deleteLinkPeopleToNfsUser(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteLinkPeopleToNfsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                deleteLinkPeopleToNfsUser(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkPeopleToNfsUser(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setMainLinkPeopleToNfsUser(Integer arg0, Integer arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setMainLinkPeopleToNfsUser", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,Integer.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    setMainLinkPeopleToNfsUser(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setMainLinkPeopleToNfsUser",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                setMainLinkPeopleToNfsUser(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Integer arg1Copy = (Integer) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).setMainLinkPeopleToNfsUser(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToRoleAccessList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToRoleAccessList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToRoleAccessList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToRoleAccessList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToRoleAccessList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRoleAccessList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToRoleList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToRoleList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToRoleList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToRoleList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToRoleList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRoleList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addLinkOperatorToRole(Integer arg0, String arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addLinkOperatorToRole", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addLinkOperatorToRole(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addLinkOperatorToRole",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addLinkOperatorToRole(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addLinkOperatorToRole(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void deleteLinkOperatorToRole(Integer arg0, String arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("deleteLinkOperatorToRole", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    deleteLinkOperatorToRole(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("deleteLinkOperatorToRole",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                deleteLinkOperatorToRole(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).deleteLinkOperatorToRole(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToRegionAccessList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToRegionAccessList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToRegionAccessList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToRegionAccessList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToRegionAccessList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRegionAccessList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToRegionList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToRegionList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToRegionList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToRegionList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToRegionList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToRegionList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void saveRegionAccessForOperator(Integer arg0, Collection arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("saveRegionAccessForOperator", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value((Serializable)arg1,Collection.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    saveRegionAccessForOperator(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("saveRegionAccessForOperator",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                saveRegionAccessForOperator(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Collection arg1Copy = (Collection) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).saveRegionAccessForOperator(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToSuperRegionAccessList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToSuperRegionAccessList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToSuperRegionAccessList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToSuperRegionAccessList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToSuperRegionAccessList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToSuperRegionAccessList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findOperatorToSuperRegionList(Integer arg0, String arg1) throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findOperatorToSuperRegionList", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value(arg1,String.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findOperatorToSuperRegionList(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findOperatorToSuperRegionList",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findOperatorToSuperRegionList(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                String arg1Copy = (String) copies[1];
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findOperatorToSuperRegionList(arg0Copy, arg1Copy);
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void saveSuperRegionAccessForOperator(Integer arg0, Collection arg1) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("saveSuperRegionAccessForOperator", true);
                    out.write_value(arg0,Integer.class);
                    out.write_value((Serializable)arg1,Collection.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    saveSuperRegionAccessForOperator(arg0,arg1);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("saveSuperRegionAccessForOperator",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                saveSuperRegionAccessForOperator(arg0, arg1);
                return;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                Integer arg0Copy = (Integer) copies[0];
                Collection arg1Copy = (Collection) copies[1];
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).saveSuperRegionAccessForOperator(arg0Copy, arg1Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ArrayList findAllTerrabyteServers() throws ModelException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA.portable.OutputStream out = _request("findAllTerrabyteServers", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ArrayList) in.read_value(ArrayList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/ModelEx:1.0")) {
                        throw (ModelException) in.read_value(ModelException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findAllTerrabyteServers();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findAllTerrabyteServers",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findAllTerrabyteServers();
            }
            try {
                ArrayList result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findAllTerrabyteServers();
                return (ArrayList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof ModelException) {
                    throw (ModelException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Profile findProfileByKey(Profile arg0) throws NoSuchProfileException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("findProfileByKey", true);
                    out.write_value(arg0,Profile.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Profile) in.read_value(Profile.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchProfileEx:1.0")) {
                        throw (NoSuchProfileException) in.read_value(NoSuchProfileException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    return findProfileByKey(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("findProfileByKey",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                return findProfileByKey(arg0);
            }
            try {
                Profile arg0Copy = (Profile) Util.copyObject(arg0,_orb());
                Profile result = ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).findProfileByKey(arg0Copy);
                return (Profile)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchProfileException) {
                    throw (NoSuchProfileException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeProfile(Profile arg0) throws NoSuchProfileException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeProfile", true);
                    out.write_value(arg0,Profile.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/NoSuchProfileEx:1.0")) {
                        throw (NoSuchProfileException) in.read_value(NoSuchProfileException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    removeProfile(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeProfile",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                removeProfile(arg0);
                return;
            }
            try {
                Profile arg0Copy = (Profile) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).removeProfile(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof NoSuchProfileException) {
                    throw (NoSuchProfileException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addProfile(Profile arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addProfile", true);
                    out.write_value(arg0,Profile.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    addProfile(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addProfile",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                addProfile(arg0);
                return;
            }
            try {
                Profile arg0Copy = (Profile) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).addProfile(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void updateProfile(Profile arg0) throws MappingException, RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("updateProfile", true);
                    out.write_value(arg0,Profile.class);
                    _invoke(out);
                    return;
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String id = in.read_string();
                    if (id.equals("IDL:com/nri/_exception/MappingEx:1.0")) {
                        throw (MappingException) in.read_value(MappingException.class);
                    }
                    throw new UnexpectedException(id);
                } catch (RemarshalException ex) {
                    updateProfile(arg0);
                    return;
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("updateProfile",com.nri.ejb.SecurityActionProcessorFacade.class);
            if (so == null) {
                updateProfile(arg0);
                return;
            }
            try {
                Profile arg0Copy = (Profile) Util.copyObject(arg0,_orb());
                ((com.nri.ejb.SecurityActionProcessorFacade)so.servant).updateProfile(arg0Copy);
                return;
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof MappingException) {
                    throw (MappingException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
